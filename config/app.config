<?php

use Collective\Actions\HelloWorldAction;
use Collective\Actions\HelloWorldJsonAction;
use Collective\Middleware\LoggerMiddleware;
use Monolog\Handler\StreamHandler;
use Monolog\Logger;
use Psr\Http\Message\ResponseInterface;
use Psr\Http\Message\ServerRequestInterface;

return [
    "settings" => [
        'determineRouteBeforeAppMiddleware' => true,
        'displayErrorDetails' => true,
        'routes' => [
            'get' => [
                '/' => [ "callable" => HelloWorldAction::class, "mw" => [], "name" => "" ],
                '/json' => [ "callable" => HelloWorldJsonAction::class, "mw" => [], "name" => "" ]
            ]
        ],
        "app-middleware" => [
            LoggerMiddleware::class
        ],
        "config" => [
            "logger_name" => "Collective",
            'template_path' => "../templates",
            "cache_path" => "../cache",
            "log_path" => "../logs"
        ]
    ],
    'csrf' => function ($c) {
      return new \Slim\Csrf\Guard();
    },
    "view" => function (\Interop\Container\ContainerInterface $c) {
        $view = new \Slim\Views\Twig($c['settings']['config']['template_path'],
            ['cache' => $c['settings']['config']['cache_path']]);

        // Instantiate and add Slim specific extension
        $view->addExtension(
            new Slim\Views\TwigExtension(
                $c['router'],
                $c['request']->getUri()
            )
        );

        //Add Flash Messages to TWIG
        if ($c->has('flash')) {
            $all = $c['flash']->getAll();
            $view->getEnvironment()->addGlobal("flash", $all);
        }


        return $view;
    },
    "logger" => function ($c) {
        $log = new Logger($c['settings']['config']['logger_name']);
        $log->pushHandler(new StreamHandler($c['settings']['config']['log_path'], Logger::NOTICE));

        return $log;
    },
    "twig" => function ($c) {
        return new \Collective\Responders\TwigResponder($c['view']);
    },
    "json" => function ($c) {
        return new \Collective\Responders\JsonResponder();
    },
    "phpview" => function ($c) {
        return new \Slim\Views\PhpRenderer("../templates");
    },
    "session" => new \Collective\Session\Session(),
    "notFoundHandler" => function ($c) {
        return function (ServerRequestInterface $request, ResponseInterface $response) use ($c) {
            return $c['view']->render($response, "404.twig");
        };
    },
    "errorHandler" => function ($c) {
        return function (ServerRequestInterface $request, ResponseInterface $response, $exception) use ($c) {
            return $c['view']->render($response, "500.twig");
        };
    },
    "notAllowedHandler" => function ($c) {
        return function ($request, $response, $methods) use ($c) {
            return $c['view']->render($response, "405", [$methods]);
        };
    },
    "flash" => function ($c) {
        return new \Collective\Flash\FlashMiddleware($c);
    }
];